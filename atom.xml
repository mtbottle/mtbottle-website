<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Michelle's [uncreative adjective] Blog</title>
    <link href="http://michtran.ca/blog//atom.xml" rel="self" />
    <link href="http://michtran.ca/blog/" />
    <id>http://michtran.ca/blog//atom.xml</id>
    <author>
        <name>Michelle Tran</name>
        <email>email@michtran.ca</email>
    </author>
    <updated>2023-01-11T00:00:00Z</updated>
    <entry>
    <title>Product Limits: You're Going to Need Them</title>
    <link href="http://michtran.ca/blog//blog/posts/2023-01-11-Product_limits.html" />
    <id>http://michtran.ca/blog//blog/posts/2023-01-11-Product_limits.html</id>
    <published>2023-01-11T00:00:00Z</published>
    <updated>2023-01-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
<em>Posted on January 11, 2023</em>
    
</div>

<p>Limits on the product functionality is often overlooked and added too late. They tend to be considered after we run into problems with the API, usually after a major incident where we ask <em>“how could this have been prevented”</em> in the incident review. However, once users are accustomed to a certain way of calling the API, it becomes <em>incredibly</em> difficult to add the limit without annoying those users (will likely involve getting them to migrate to a new API or you needing to set a custom limit on them, which won’t result any customer satisfaction either way). And if they’re paying users, than that might just sink your business. So, it’s good to set product limits early to ensure more predictable and manageable operations.</p>
<h2 id="guidelines-for-thinking-about-product-limits">Guidelines for Thinking about Product Limits</h2>
<p>I like to come up with checklists on what to think about when it comes making sure I consider <em>stuff</em> (not just product limits) when designing a new system. These product limit questions are not meant to be exhaustive, but just serve as a starting point for thinking about where to add limits. In my experience, there are generally a few areas where these types of limits should be considered:</p>
<h3 id="api-level-limits">API Level Limits</h3>
<p>These limits are the ones that exists on the API. Generally, these are the easiest to understand as there are lots of examples of APIs that implemented these which you can look at. They usually involve some sort of limit on request and response. Some useful questions you may want to ask yourself when thinking about designing a new API:</p>
<ul>
<li><p>Do we want to set a rate limit on the API? What do we want limit on? (ie. account rate limiting? session rate limiting?)</p></li>
<li>For endpoints where we return a list of items:
<ul>
<li>What kind of pagination strategy can/should we use? (ie. cursor, offset/limit etc.)</li>
<li>How many results should we return as default on a single page?</li>
<li>How many results should we set as a max on a single request?</li>
<li>How far back do we allow users to paginate?</li>
</ul></li>
<li><p>What should our response SLAs be?</p></li>
</ul>
<h3 id="storage-limits">Storage Limits</h3>
<p>These limits generally deal with how long we store data and potential contractual limits set on the data. Storage and data access are not free, so we should always consider trimming off the unnecessary data and being explicit about the limitations on storage and access. Some questions you might want to ask yourself about the data you’re adding:</p>
<ul>
<li><p>What should our retention policy be? How do we enforce this?</p></li>
<li><p>Do we want to set a limit to how many objects we store per account/user? How do we enforce this?</p></li>
<li><p>Do we want to consider tiered access, where users can access data by certain APIs up to certain point, but require a different API or need to contact our customer support for data beyond that threshold?</p></li>
</ul>
<h3 id="third-party-request-limits">Third Party Request Limits</h3>
<p>We want to also consider limits when talking to downstream dependencies. If you application will require a lot of network requests to downstream services, then it would be good to think about the sort of interactions that are acceptable which will affect some of the API contract requirements that we will have. Some questions you may want to ask yourself as you inventory your downsteam requests:</p>
<ul>
<li><p>What sorts of timeouts make sense? Given our SLAs?</p></li>
<li><p>If third party doesn’t return, what kind of degradation will be acceptable? Would having graceful degradation make sense?</p></li>
</ul>
<h3 id="data-synchronicity">Data Synchronicity</h3>
<p>Lastly, for systems that are OK with some level of eventual consistency, we will want to consider how this affects the system and what sort of delay we would be able to tolerate. Some questions you may want to ask yourself about the behaviour of your APIs and data entities related to synchronicity:</p>
<ul>
<li><p>Do we have any eventual consistency for data objects that we control? What kind of delay can we tolerate for this?</p></li>
<li><p>Are there any interactions between our APIs that need to be <em>in-sync</em>? ie. API requests dealing with financial balance will likely require more synchronicity than uploading a profile picture.</p></li>
<li><p>Can any of the entities that we control relax their current synchronicity? (not that we’re necessarily going to do so, but just that the actual requirements for that object isn’t as strict as it is currently implemented)</p></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>I wrote this as an exercise to myself for thinking about product limits for one of the projects I’ve lead. Hopefully someone else will find this useful as well.</p>
<!--- 
Considerations

- Examples given on the program docs just specify entity limits. I’ve included other things like request timeouts and other product related SLA stuff (which arguably are also “product limits”, as it sets expectations on caller). It’s a question on scope… how much do we think these SLAs are important for availability?

_ For APIs that appear on web, we will likely want to follow some of Web’s SLAs (particularly in regards to the response time SLAs). 

_ I’m also thinking that there is not benefit (for us at least) to separating the API based on source that is calling it (ie. web, API, mobile etc). There might be benefits for other high priority apis (like authentication), but for us I think we can look at APIs as generally as possible.

- For newer services, it will be hard to figure out what our limits should be (as we don’t have established usage patterns). So for these, coming up with a limit based off of what we are expecting from the first iteration of the product should be fine. For example, for triage-assist-service, we can probably set our max limit to 20, as the only place where we’re using that service will only need 20 incidents. If the product changes, then we can consider changing this. Otherwise, we can probably also set an arbitrary larger limit (ie. 50), but the most important is that we’ve thought about and have set something relatively reasonable. 
-->
]]></summary>
</entry>
<entry>
    <title>Retrospective on 2022</title>
    <link href="http://michtran.ca/blog//blog/posts/2023-01-01-retrospective.html" />
    <id>http://michtran.ca/blog//blog/posts/2023-01-01-retrospective.html</id>
    <published>2023-01-01T00:00:00Z</published>
    <updated>2023-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
<em>Posted on January  1, 2023</em>
    
</div>

<p>Wow, time goes by so quickly. In summary: it was a bad year for crypto-currencies, social media, Ukraine, Tesla, Pakistan and the climate. I do hope that there’s finally a reckoning with unsustainable (North American) car-centric lifestyle and it’s cost on the climate, mental and physical health, and maintenance/usage cost (subsidized by cheap oil and the fact that infrastructure is fairly new).</p>
<p>As for myself, I got sick a lot this year. This is what life is like with a toddler in daycare. However, I never tested positive for COVID even though I was fairly ill several times this year. And I’m still recovering from something, so starting off the new year still mildly sick.</p>
<p>I started writing more in my free time and made an effort to publish more this year. I made it more convienient to jot down notes or blog ideas by having a shared central location to access my writings across devices, which was the main reason for my success with publishing more stuff this year.</p>
<p>Early in the year, I wrote about my laptop being on the verge of explosion. I ended up giving away that 2015 MBP which was then replaced by a free one that I got from my job when I quit (2019 MBP). I also got myself a new Samsung Tablet which I still use a surprising amount.</p>
<p>It’s hard to make a decision on my favourite book this year, but if I had to narrow it down, it would be between:</p>
<ul>
<li><a href="https://www.goodreads.com/book/show/30312747-not-quite-narwhal">Not Quite Narwhal</a></li>
<li><a href="https://www.goodreads.com/book/show/36748607-p-is-for-pterodactyl">P is for Pterodactyl</a></li>
<li><a href="https://www.goodreads.com/book/show/54809220-the-rock-from-the-sky">The Rock from the Sky</a> (don’t actually read this to a 2 year old though, it’s kind of scary for them)</li>
</ul>
<p>They all happen to be children’s books, none of which are at the right level for my toddler. I’m not sure what that says about me.</p>
<p>The <em>“Great Resignation”</em> was full in effect at the beginning of the year. However as we approached the end of the year, there were many layoffs. Even then, I decided to change my job during this time.</p>
<p>I had enjoyed working at my previous company. The people were great, company was renowned and the projects were mostly interesting. After a team change at the beginning of the year, I found myself slipping from being one of the team’s most senior people (more or less acting as a team lead) to being right in the middle or on the middle-junior side of the team. This meant that all the interesting large projects that I wanted to lead were slowly becoming out of reach and be given to those more <em>senior</em> than me (and I’ll probably be left with smaller projects at <em>“my level”</em>, due to a slowly creeping title inflation that left me inflated out). I decided that to fix this problem, I would have to either <em>actually</em> work on promotion (which included compiling a “promo” package where I write a 10 page document convincing a panel of random peers that I deserve to be promoted) or move elsewhere. Moving elsewhere was apparently much faster and easier. And my new company also checks off another career bucket list item, so total win-win.</p>
<p>Lastly, some of my favourite phrases coming from my toddler this year:</p>
<ul>
<li>“water is too wet”</li>
<li>“that was a BIG one”</li>
<li>“RAWR! I lion/tiger/bear”</li>
<li>“no kick mama, kick dada”</li>
<li>“you have a big butt!”</li>
<li>“I love you yellow blankey”</li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Reflecting on 10 years as a Software Developer</title>
    <link href="http://michtran.ca/blog//blog/posts/2022-12-22-Reflecting_10_years.html" />
    <id>http://michtran.ca/blog//blog/posts/2022-12-22-Reflecting_10_years.html</id>
    <published>2022-12-22T00:00:00Z</published>
    <updated>2022-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
<em>Posted on December 22, 2022</em>
    
</div>

<p>This year, I celebrate 10 years as a Software Developer. Admittedly, I’m still a bit surprised that I’m still in the same industry, especially since I kind of got into it by accident. Being a software developer has been a fairly fulfilling career, as much as a career under capitalism can be fulfilling. I have a good income and a relatively flexible schedule.</p>
<p>Over the years, I’ve intentionally chosen jobs where I get to learn something. This has led me to work in many different companies, from large public enterprises to 10 people startups. All the companies I’ve worked for were considered “tech” companies, although they all ranged from e-commerce, data science, fintech, and devops. In that sense, my experience is biased towards companies that treat their developers as first tier employees (compared to companies which hire developers, but tech isn’t their product).</p>
<p>I’ve recently decided (ie. in the last few months) that I want to become a Software Architect. How did I manage being a Software Developer for 10(!!!) years without knowing what I wanted in the end? I imagine this is a pretty common scenario for most people. I realized this after reading Staff Engineer (by Will Larson), Fundamentals of Software Architecture (by Mark Richards, Neal Ford), and also working closely with some Staff Engineers at my previous company then thinking: <em>“hey, I want to do what they’re doing and I probably won’t suck at it”</em>.</p>
<p>Most technical problems have already been solved by a bigger and better resourced company than yours. Being “in the know” of these solutions and knowing how they fit into your product roadmap is a skill in itself.</p>
<p>The more senior you get, the more that writing and communication skills matter. This is where having a liberal arts degree will prove useful.</p>
<p>I have a horrible tendency to be very glib when discussing things in person. My excuse for this is because I find it fun to think up ridiculous scenarios to solve a problem, and take it half seriously (example: suggesting that we trade a person on the team with some service ownership changes). I’m realizing now that being more senior means needing to be taken more seriously, which means that I’m going to have to be more thoughtful when I say something. At best, maybe there is some insight that will help contribute to the final solution. But at worst, people will question my competance. Maybe there’s a balance that I haven’t perfected yet. Being fully remote (and also having a different tone when writing) definitely helps.</p>
<p>All successful companies will have an interesting scaling challenge. I haven’t interviewed with a company that did not talk about their exciting scaling challenge.</p>
<p>Self-promotion, or promotion of an idea is an undervalued skill. It’s an almost contradictory skill to what makes someone a good software developer (ie. discerning and critical assessment of code/proposal). I struggle with this, but also realize that if I want to be an effective leader (and climb the corporate ranks <em>shudder</em>) then this is something that I need to work on.</p>
<p>You owe no company your labour and time outside your contract. No matter how much a company describes their culture as a “family” or that they care about their employees, remember that they care way more about their shareholders and profit.</p>
<p>Being oncall is valuable experience. All engineers should go oncall at least for some portion of their careers, but the best companies are the ones who compensate properly for the extra hours of being standby. Going oncall for a week requires lifestyle changes and extra cognitive overhead that wouldn’t have occurred otherwise (like carrying around your laptop for outings where you’re going more than 15 mins away from home, only going places where you will have good internet reception, and ensuring that there’s someone else there to pick up caring for your toddler when/if you have to drop everything to attend to a page). That being said, I still get a sinking feeling in my chest when a page goes off (oncall PTSD maybe).</p>
<p>Some bucket-list career things that I still maybe want to achieve:</p>
<ul>
<li>work at a consultancy or do freelance work</li>
<li>give a talk at a conference (was more important to me maybe 5 years ago, but now I don’t really enjoy going to conferences nor do I actually like to listen to conference talks for learning)</li>
<li>work at a non-profit doing something medical, legal or climate adjacent. I want to make the world better.</li>
<li>figure out what I really want to be when I grow up</li>
</ul>
<p>Finally, a secret confession: I don’t do that much coding for fun.</p>
]]></summary>
</entry>

</feed>
